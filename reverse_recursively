//https://www.youtube.com/watch?v=bjtMCwy_LMA
//https://youtu.be/sYcOK51hl-A
//https://leetcode.com/problems/reverse-linked-list/
#include<bits/stdc++.h>
using namespace std;
/*
struct node{
    int data;
    node* next;
};
struct node *head,*tail=NULL;
void add(int data1){
struct node *newnode = new node;

newnode->data = data1;
newnode->next = NULL;
if(head==NULL){
head = newnode;
tail = newnode;
}
else{
tail->next = newnode;
tail = newnode;
} 

}
node* reverse(node* &head){
if(head==NULL || head->next==NULL){
return head;
}
struct node* newhead = reverse(head->next);
head->next->next = head;
head->next = NULL;
return newhead;
}


void display(node* head){
while(head!=NULL){
cout<<head->data;
head = head->next;
}
}
int main(){
    int t;
    cin>>t;
    while(t--){
        int k;
        cin>>k;
      add(k);

    }
    node* newhead1 = reverse(head);
    display(newhead1);
    
    return 0;
}*/
struct node{
    int data;
    node* next;
};
node *head,*tail=NULL;
void add(int data){
node *newnode = new node;
newnode->data = data;
newnode->next = NULL;
if(head==NULL){
head = newnode;
tail = newnode;
}
else{
    tail->next = newnode;
    tail = newnode;
}
}
node* rev(node * &head){
if(head==NULL || head->next ==NULL){
return head;
}
struct node* newhead = rev(head->next);
head->next->next = head;
head->next = NULL;
return newhead;
}

void display(node* head){
while(head!=NULL){
cout<<head->data;
head = head->next;
}
}
int main(){
    int k;
    cin>>k;
    while(k--){
int l;
cin>>l;
add(l);
    }
    node* newnhead = rev(head);
    display(newnhead);
    return 0;
}
